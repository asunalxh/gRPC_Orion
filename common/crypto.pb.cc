// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto.proto

#include "crypto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace crypto {
constexpr GeneralMessage::GeneralMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GeneralMessageDefaultTypeInternal {
  constexpr GeneralMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GeneralMessageDefaultTypeInternal() {}
  union {
    GeneralMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GeneralMessageDefaultTypeInternal _GeneralMessage_default_instance_;
constexpr OramMessage::OramMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_structure_(int64_t{0})
  , pos_(uint64_t{0u}){}
struct OramMessageDefaultTypeInternal {
  constexpr OramMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OramMessageDefaultTypeInternal() {}
  union {
    OramMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OramMessageDefaultTypeInternal _OramMessage_default_instance_;
constexpr OramBucketMessage::OramBucketMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bucket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_structure_(int64_t{0})
  , pos_(uint64_t{0u}){}
struct OramBucketMessageDefaultTypeInternal {
  constexpr OramBucketMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OramBucketMessageDefaultTypeInternal() {}
  union {
    OramBucketMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OramBucketMessageDefaultTypeInternal _OramBucketMessage_default_instance_;
constexpr DocIdMessage::DocIdMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(int64_t{0}){}
struct DocIdMessageDefaultTypeInternal {
  constexpr DocIdMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocIdMessageDefaultTypeInternal() {}
  union {
    DocIdMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocIdMessageDefaultTypeInternal _DocIdMessage_default_instance_;
constexpr DocMessage::DocMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(int64_t{0}){}
struct DocMessageDefaultTypeInternal {
  constexpr DocMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocMessageDefaultTypeInternal() {}
  union {
    DocMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocMessageDefaultTypeInternal _DocMessage_default_instance_;
}  // namespace crypto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_crypto_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_crypto_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_crypto_2eproto = nullptr;

const uint32_t TableStruct_crypto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crypto::GeneralMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crypto::OramMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::crypto::OramMessage, data_structure_),
  PROTOBUF_FIELD_OFFSET(::crypto::OramMessage, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crypto::OramBucketMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::crypto::OramBucketMessage, data_structure_),
  PROTOBUF_FIELD_OFFSET(::crypto::OramBucketMessage, pos_),
  PROTOBUF_FIELD_OFFSET(::crypto::OramBucketMessage, bucket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crypto::DocIdMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::crypto::DocIdMessage, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::crypto::DocMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::crypto::DocMessage, id_),
  PROTOBUF_FIELD_OFFSET(::crypto::DocMessage, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::crypto::GeneralMessage)},
  { 6, -1, -1, sizeof(::crypto::OramMessage)},
  { 14, -1, -1, sizeof(::crypto::OramBucketMessage)},
  { 23, -1, -1, sizeof(::crypto::DocIdMessage)},
  { 30, -1, -1, sizeof(::crypto::DocMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crypto::_GeneralMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crypto::_OramMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crypto::_OramBucketMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crypto::_DocIdMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::crypto::_DocMessage_default_instance_),
};

const char descriptor_table_protodef_crypto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014crypto.proto\022\006crypto\"\020\n\016GeneralMessage"
  "\"2\n\013OramMessage\022\026\n\016data_structure\030\001 \001(\003\022"
  "\013\n\003pos\030\002 \001(\004\"H\n\021OramBucketMessage\022\026\n\016dat"
  "a_structure\030\001 \001(\003\022\013\n\003pos\030\002 \001(\004\022\016\n\006bucket"
  "\030\003 \001(\014\"\032\n\014DocIdMessage\022\n\n\002id\030\001 \001(\003\"\'\n\nDo"
  "cMessage\022\n\n\002id\030\001 \001(\003\022\r\n\005value\030\002 \001(\014b\006pro"
  "to3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_crypto_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_2eproto = {
  false, false, 243, descriptor_table_protodef_crypto_2eproto, "crypto.proto", 
  &descriptor_table_crypto_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_crypto_2eproto::offsets,
  file_level_metadata_crypto_2eproto, file_level_enum_descriptors_crypto_2eproto, file_level_service_descriptors_crypto_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_crypto_2eproto_getter() {
  return &descriptor_table_crypto_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_crypto_2eproto(&descriptor_table_crypto_2eproto);
namespace crypto {

// ===================================================================

class GeneralMessage::_Internal {
 public:
};

GeneralMessage::GeneralMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:crypto.GeneralMessage)
}
GeneralMessage::GeneralMessage(const GeneralMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:crypto.GeneralMessage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeneralMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeneralMessage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GeneralMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_crypto_2eproto_getter, &descriptor_table_crypto_2eproto_once,
      file_level_metadata_crypto_2eproto[0]);
}

// ===================================================================

class OramMessage::_Internal {
 public:
};

OramMessage::OramMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:crypto.OramMessage)
}
OramMessage::OramMessage(const OramMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&data_structure_, &from.data_structure_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&data_structure_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:crypto.OramMessage)
}

inline void OramMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_structure_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&data_structure_)) + sizeof(pos_));
}

OramMessage::~OramMessage() {
  // @@protoc_insertion_point(destructor:crypto.OramMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OramMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OramMessage::ArenaDtor(void* object) {
  OramMessage* _this = reinterpret_cast< OramMessage* >(object);
  (void)_this;
}
void OramMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OramMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OramMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto.OramMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_structure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&data_structure_)) + sizeof(pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OramMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 data_structure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          data_structure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OramMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.OramMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 data_structure = 1;
  if (this->_internal_data_structure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_data_structure(), target);
  }

  // uint64 pos = 2;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto.OramMessage)
  return target;
}

size_t OramMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto.OramMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 data_structure = 1;
  if (this->_internal_data_structure() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_data_structure());
  }

  // uint64 pos = 2;
  if (this->_internal_pos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OramMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OramMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OramMessage::GetClassData() const { return &_class_data_; }

void OramMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OramMessage *>(to)->MergeFrom(
      static_cast<const OramMessage &>(from));
}


void OramMessage::MergeFrom(const OramMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto.OramMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_data_structure() != 0) {
    _internal_set_data_structure(from._internal_data_structure());
  }
  if (from._internal_pos() != 0) {
    _internal_set_pos(from._internal_pos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OramMessage::CopyFrom(const OramMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto.OramMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OramMessage::IsInitialized() const {
  return true;
}

void OramMessage::InternalSwap(OramMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OramMessage, pos_)
      + sizeof(OramMessage::pos_)
      - PROTOBUF_FIELD_OFFSET(OramMessage, data_structure_)>(
          reinterpret_cast<char*>(&data_structure_),
          reinterpret_cast<char*>(&other->data_structure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OramMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_crypto_2eproto_getter, &descriptor_table_crypto_2eproto_once,
      file_level_metadata_crypto_2eproto[1]);
}

// ===================================================================

class OramBucketMessage::_Internal {
 public:
};

OramBucketMessage::OramBucketMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:crypto.OramBucketMessage)
}
OramBucketMessage::OramBucketMessage(const OramBucketMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bucket().empty()) {
    bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bucket(), 
      GetArenaForAllocation());
  }
  ::memcpy(&data_structure_, &from.data_structure_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&data_structure_)) + sizeof(pos_));
  // @@protoc_insertion_point(copy_constructor:crypto.OramBucketMessage)
}

inline void OramBucketMessage::SharedCtor() {
bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_structure_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_) -
    reinterpret_cast<char*>(&data_structure_)) + sizeof(pos_));
}

OramBucketMessage::~OramBucketMessage() {
  // @@protoc_insertion_point(destructor:crypto.OramBucketMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OramBucketMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OramBucketMessage::ArenaDtor(void* object) {
  OramBucketMessage* _this = reinterpret_cast< OramBucketMessage* >(object);
  (void)_this;
}
void OramBucketMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OramBucketMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OramBucketMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto.OramBucketMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_.ClearToEmpty();
  ::memset(&data_structure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_) -
      reinterpret_cast<char*>(&data_structure_)) + sizeof(pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OramBucketMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 data_structure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          data_structure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes bucket = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bucket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OramBucketMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.OramBucketMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 data_structure = 1;
  if (this->_internal_data_structure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_data_structure(), target);
  }

  // uint64 pos = 2;
  if (this->_internal_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_pos(), target);
  }

  // bytes bucket = 3;
  if (!this->_internal_bucket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_bucket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto.OramBucketMessage)
  return target;
}

size_t OramBucketMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto.OramBucketMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bucket = 3;
  if (!this->_internal_bucket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bucket());
  }

  // int64 data_structure = 1;
  if (this->_internal_data_structure() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_data_structure());
  }

  // uint64 pos = 2;
  if (this->_internal_pos() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OramBucketMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OramBucketMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OramBucketMessage::GetClassData() const { return &_class_data_; }

void OramBucketMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OramBucketMessage *>(to)->MergeFrom(
      static_cast<const OramBucketMessage &>(from));
}


void OramBucketMessage::MergeFrom(const OramBucketMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto.OramBucketMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bucket().empty()) {
    _internal_set_bucket(from._internal_bucket());
  }
  if (from._internal_data_structure() != 0) {
    _internal_set_data_structure(from._internal_data_structure());
  }
  if (from._internal_pos() != 0) {
    _internal_set_pos(from._internal_pos());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OramBucketMessage::CopyFrom(const OramBucketMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto.OramBucketMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OramBucketMessage::IsInitialized() const {
  return true;
}

void OramBucketMessage::InternalSwap(OramBucketMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &bucket_, lhs_arena,
      &other->bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OramBucketMessage, pos_)
      + sizeof(OramBucketMessage::pos_)
      - PROTOBUF_FIELD_OFFSET(OramBucketMessage, data_structure_)>(
          reinterpret_cast<char*>(&data_structure_),
          reinterpret_cast<char*>(&other->data_structure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OramBucketMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_crypto_2eproto_getter, &descriptor_table_crypto_2eproto_once,
      file_level_metadata_crypto_2eproto[2]);
}

// ===================================================================

class DocIdMessage::_Internal {
 public:
};

DocIdMessage::DocIdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:crypto.DocIdMessage)
}
DocIdMessage::DocIdMessage(const DocIdMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:crypto.DocIdMessage)
}

inline void DocIdMessage::SharedCtor() {
id_ = int64_t{0};
}

DocIdMessage::~DocIdMessage() {
  // @@protoc_insertion_point(destructor:crypto.DocIdMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DocIdMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DocIdMessage::ArenaDtor(void* object) {
  DocIdMessage* _this = reinterpret_cast< DocIdMessage* >(object);
  (void)_this;
}
void DocIdMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocIdMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocIdMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto.DocIdMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocIdMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocIdMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.DocIdMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto.DocIdMessage)
  return target;
}

size_t DocIdMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto.DocIdMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocIdMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DocIdMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocIdMessage::GetClassData() const { return &_class_data_; }

void DocIdMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DocIdMessage *>(to)->MergeFrom(
      static_cast<const DocIdMessage &>(from));
}


void DocIdMessage::MergeFrom(const DocIdMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto.DocIdMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocIdMessage::CopyFrom(const DocIdMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto.DocIdMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocIdMessage::IsInitialized() const {
  return true;
}

void DocIdMessage::InternalSwap(DocIdMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocIdMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_crypto_2eproto_getter, &descriptor_table_crypto_2eproto_once,
      file_level_metadata_crypto_2eproto[3]);
}

// ===================================================================

class DocMessage::_Internal {
 public:
};

DocMessage::DocMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:crypto.DocMessage)
}
DocMessage::DocMessage(const DocMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:crypto.DocMessage)
}

inline void DocMessage::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = int64_t{0};
}

DocMessage::~DocMessage() {
  // @@protoc_insertion_point(destructor:crypto.DocMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DocMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DocMessage::ArenaDtor(void* object) {
  DocMessage* _this = reinterpret_cast< DocMessage* >(object);
  (void)_this;
}
void DocMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto.DocMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto.DocMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto.DocMessage)
  return target;
}

size_t DocMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto.DocMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DocMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocMessage::GetClassData() const { return &_class_data_; }

void DocMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DocMessage *>(to)->MergeFrom(
      static_cast<const DocMessage &>(from));
}


void DocMessage::MergeFrom(const DocMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto.DocMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocMessage::CopyFrom(const DocMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto.DocMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocMessage::IsInitialized() const {
  return true;
}

void DocMessage::InternalSwap(DocMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_crypto_2eproto_getter, &descriptor_table_crypto_2eproto_once,
      file_level_metadata_crypto_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace crypto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::crypto::GeneralMessage* Arena::CreateMaybeMessage< ::crypto::GeneralMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crypto::GeneralMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto::OramMessage* Arena::CreateMaybeMessage< ::crypto::OramMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crypto::OramMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto::OramBucketMessage* Arena::CreateMaybeMessage< ::crypto::OramBucketMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crypto::OramBucketMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto::DocIdMessage* Arena::CreateMaybeMessage< ::crypto::DocIdMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crypto::DocIdMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto::DocMessage* Arena::CreateMaybeMessage< ::crypto::DocMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crypto::DocMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

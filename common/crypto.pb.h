// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crypto_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crypto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crypto_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crypto_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_crypto_2eproto;
namespace crypto {
class DocIdMessage;
struct DocIdMessageDefaultTypeInternal;
extern DocIdMessageDefaultTypeInternal _DocIdMessage_default_instance_;
class DocMessage;
struct DocMessageDefaultTypeInternal;
extern DocMessageDefaultTypeInternal _DocMessage_default_instance_;
class GeneralMessage;
struct GeneralMessageDefaultTypeInternal;
extern GeneralMessageDefaultTypeInternal _GeneralMessage_default_instance_;
class OramBucketMessage;
struct OramBucketMessageDefaultTypeInternal;
extern OramBucketMessageDefaultTypeInternal _OramBucketMessage_default_instance_;
class OramMessage;
struct OramMessageDefaultTypeInternal;
extern OramMessageDefaultTypeInternal _OramMessage_default_instance_;
}  // namespace crypto
PROTOBUF_NAMESPACE_OPEN
template<> ::crypto::DocIdMessage* Arena::CreateMaybeMessage<::crypto::DocIdMessage>(Arena*);
template<> ::crypto::DocMessage* Arena::CreateMaybeMessage<::crypto::DocMessage>(Arena*);
template<> ::crypto::GeneralMessage* Arena::CreateMaybeMessage<::crypto::GeneralMessage>(Arena*);
template<> ::crypto::OramBucketMessage* Arena::CreateMaybeMessage<::crypto::OramBucketMessage>(Arena*);
template<> ::crypto::OramMessage* Arena::CreateMaybeMessage<::crypto::OramMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace crypto {

// ===================================================================

class GeneralMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:crypto.GeneralMessage) */ {
 public:
  inline GeneralMessage() : GeneralMessage(nullptr) {}
  explicit constexpr GeneralMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeneralMessage(const GeneralMessage& from);
  GeneralMessage(GeneralMessage&& from) noexcept
    : GeneralMessage() {
    *this = ::std::move(from);
  }

  inline GeneralMessage& operator=(const GeneralMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralMessage& operator=(GeneralMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeneralMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeneralMessage* internal_default_instance() {
    return reinterpret_cast<const GeneralMessage*>(
               &_GeneralMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeneralMessage& a, GeneralMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneralMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeneralMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeneralMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeneralMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GeneralMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GeneralMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crypto.GeneralMessage";
  }
  protected:
  explicit GeneralMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:crypto.GeneralMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_crypto_2eproto;
};
// -------------------------------------------------------------------

class OramMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crypto.OramMessage) */ {
 public:
  inline OramMessage() : OramMessage(nullptr) {}
  ~OramMessage() override;
  explicit constexpr OramMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OramMessage(const OramMessage& from);
  OramMessage(OramMessage&& from) noexcept
    : OramMessage() {
    *this = ::std::move(from);
  }

  inline OramMessage& operator=(const OramMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OramMessage& operator=(OramMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OramMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const OramMessage* internal_default_instance() {
    return reinterpret_cast<const OramMessage*>(
               &_OramMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OramMessage& a, OramMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(OramMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OramMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OramMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OramMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OramMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OramMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OramMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crypto.OramMessage";
  }
  protected:
  explicit OramMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataStructureFieldNumber = 1,
    kPosFieldNumber = 2,
  };
  // int64 data_structure = 1;
  void clear_data_structure();
  int64_t data_structure() const;
  void set_data_structure(int64_t value);
  private:
  int64_t _internal_data_structure() const;
  void _internal_set_data_structure(int64_t value);
  public:

  // uint64 pos = 2;
  void clear_pos();
  uint64_t pos() const;
  void set_pos(uint64_t value);
  private:
  uint64_t _internal_pos() const;
  void _internal_set_pos(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:crypto.OramMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t data_structure_;
  uint64_t pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_crypto_2eproto;
};
// -------------------------------------------------------------------

class OramBucketMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crypto.OramBucketMessage) */ {
 public:
  inline OramBucketMessage() : OramBucketMessage(nullptr) {}
  ~OramBucketMessage() override;
  explicit constexpr OramBucketMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OramBucketMessage(const OramBucketMessage& from);
  OramBucketMessage(OramBucketMessage&& from) noexcept
    : OramBucketMessage() {
    *this = ::std::move(from);
  }

  inline OramBucketMessage& operator=(const OramBucketMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OramBucketMessage& operator=(OramBucketMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OramBucketMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const OramBucketMessage* internal_default_instance() {
    return reinterpret_cast<const OramBucketMessage*>(
               &_OramBucketMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OramBucketMessage& a, OramBucketMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(OramBucketMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OramBucketMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OramBucketMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OramBucketMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OramBucketMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OramBucketMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OramBucketMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crypto.OramBucketMessage";
  }
  protected:
  explicit OramBucketMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBucketFieldNumber = 3,
    kDataStructureFieldNumber = 1,
    kPosFieldNumber = 2,
  };
  // bytes bucket = 3;
  void clear_bucket();
  const std::string& bucket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bucket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bucket();
  PROTOBUF_NODISCARD std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);
  private:
  const std::string& _internal_bucket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bucket(const std::string& value);
  std::string* _internal_mutable_bucket();
  public:

  // int64 data_structure = 1;
  void clear_data_structure();
  int64_t data_structure() const;
  void set_data_structure(int64_t value);
  private:
  int64_t _internal_data_structure() const;
  void _internal_set_data_structure(int64_t value);
  public:

  // uint64 pos = 2;
  void clear_pos();
  uint64_t pos() const;
  void set_pos(uint64_t value);
  private:
  uint64_t _internal_pos() const;
  void _internal_set_pos(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:crypto.OramBucketMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  int64_t data_structure_;
  uint64_t pos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_crypto_2eproto;
};
// -------------------------------------------------------------------

class DocIdMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crypto.DocIdMessage) */ {
 public:
  inline DocIdMessage() : DocIdMessage(nullptr) {}
  ~DocIdMessage() override;
  explicit constexpr DocIdMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocIdMessage(const DocIdMessage& from);
  DocIdMessage(DocIdMessage&& from) noexcept
    : DocIdMessage() {
    *this = ::std::move(from);
  }

  inline DocIdMessage& operator=(const DocIdMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocIdMessage& operator=(DocIdMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocIdMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocIdMessage* internal_default_instance() {
    return reinterpret_cast<const DocIdMessage*>(
               &_DocIdMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DocIdMessage& a, DocIdMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DocIdMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocIdMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DocIdMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DocIdMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DocIdMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DocIdMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocIdMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crypto.DocIdMessage";
  }
  protected:
  explicit DocIdMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:crypto.DocIdMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_crypto_2eproto;
};
// -------------------------------------------------------------------

class DocMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crypto.DocMessage) */ {
 public:
  inline DocMessage() : DocMessage(nullptr) {}
  ~DocMessage() override;
  explicit constexpr DocMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocMessage(const DocMessage& from);
  DocMessage(DocMessage&& from) noexcept
    : DocMessage() {
    *this = ::std::move(from);
  }

  inline DocMessage& operator=(const DocMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocMessage& operator=(DocMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocMessage* internal_default_instance() {
    return reinterpret_cast<const DocMessage*>(
               &_DocMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DocMessage& a, DocMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DocMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DocMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DocMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DocMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DocMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crypto.DocMessage";
  }
  protected:
  explicit DocMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:crypto.DocMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_crypto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeneralMessage

// -------------------------------------------------------------------

// OramMessage

// int64 data_structure = 1;
inline void OramMessage::clear_data_structure() {
  data_structure_ = int64_t{0};
}
inline int64_t OramMessage::_internal_data_structure() const {
  return data_structure_;
}
inline int64_t OramMessage::data_structure() const {
  // @@protoc_insertion_point(field_get:crypto.OramMessage.data_structure)
  return _internal_data_structure();
}
inline void OramMessage::_internal_set_data_structure(int64_t value) {
  
  data_structure_ = value;
}
inline void OramMessage::set_data_structure(int64_t value) {
  _internal_set_data_structure(value);
  // @@protoc_insertion_point(field_set:crypto.OramMessage.data_structure)
}

// uint64 pos = 2;
inline void OramMessage::clear_pos() {
  pos_ = uint64_t{0u};
}
inline uint64_t OramMessage::_internal_pos() const {
  return pos_;
}
inline uint64_t OramMessage::pos() const {
  // @@protoc_insertion_point(field_get:crypto.OramMessage.pos)
  return _internal_pos();
}
inline void OramMessage::_internal_set_pos(uint64_t value) {
  
  pos_ = value;
}
inline void OramMessage::set_pos(uint64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:crypto.OramMessage.pos)
}

// -------------------------------------------------------------------

// OramBucketMessage

// int64 data_structure = 1;
inline void OramBucketMessage::clear_data_structure() {
  data_structure_ = int64_t{0};
}
inline int64_t OramBucketMessage::_internal_data_structure() const {
  return data_structure_;
}
inline int64_t OramBucketMessage::data_structure() const {
  // @@protoc_insertion_point(field_get:crypto.OramBucketMessage.data_structure)
  return _internal_data_structure();
}
inline void OramBucketMessage::_internal_set_data_structure(int64_t value) {
  
  data_structure_ = value;
}
inline void OramBucketMessage::set_data_structure(int64_t value) {
  _internal_set_data_structure(value);
  // @@protoc_insertion_point(field_set:crypto.OramBucketMessage.data_structure)
}

// uint64 pos = 2;
inline void OramBucketMessage::clear_pos() {
  pos_ = uint64_t{0u};
}
inline uint64_t OramBucketMessage::_internal_pos() const {
  return pos_;
}
inline uint64_t OramBucketMessage::pos() const {
  // @@protoc_insertion_point(field_get:crypto.OramBucketMessage.pos)
  return _internal_pos();
}
inline void OramBucketMessage::_internal_set_pos(uint64_t value) {
  
  pos_ = value;
}
inline void OramBucketMessage::set_pos(uint64_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:crypto.OramBucketMessage.pos)
}

// bytes bucket = 3;
inline void OramBucketMessage::clear_bucket() {
  bucket_.ClearToEmpty();
}
inline const std::string& OramBucketMessage::bucket() const {
  // @@protoc_insertion_point(field_get:crypto.OramBucketMessage.bucket)
  return _internal_bucket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OramBucketMessage::set_bucket(ArgT0&& arg0, ArgT... args) {
 
 bucket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:crypto.OramBucketMessage.bucket)
}
inline std::string* OramBucketMessage::mutable_bucket() {
  std::string* _s = _internal_mutable_bucket();
  // @@protoc_insertion_point(field_mutable:crypto.OramBucketMessage.bucket)
  return _s;
}
inline const std::string& OramBucketMessage::_internal_bucket() const {
  return bucket_.Get();
}
inline void OramBucketMessage::_internal_set_bucket(const std::string& value) {
  
  bucket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OramBucketMessage::_internal_mutable_bucket() {
  
  return bucket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OramBucketMessage::release_bucket() {
  // @@protoc_insertion_point(field_release:crypto.OramBucketMessage.bucket)
  return bucket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OramBucketMessage::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    
  } else {
    
  }
  bucket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (bucket_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    bucket_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:crypto.OramBucketMessage.bucket)
}

// -------------------------------------------------------------------

// DocIdMessage

// int64 id = 1;
inline void DocIdMessage::clear_id() {
  id_ = int64_t{0};
}
inline int64_t DocIdMessage::_internal_id() const {
  return id_;
}
inline int64_t DocIdMessage::id() const {
  // @@protoc_insertion_point(field_get:crypto.DocIdMessage.id)
  return _internal_id();
}
inline void DocIdMessage::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void DocIdMessage::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:crypto.DocIdMessage.id)
}

// -------------------------------------------------------------------

// DocMessage

// int64 id = 1;
inline void DocMessage::clear_id() {
  id_ = int64_t{0};
}
inline int64_t DocMessage::_internal_id() const {
  return id_;
}
inline int64_t DocMessage::id() const {
  // @@protoc_insertion_point(field_get:crypto.DocMessage.id)
  return _internal_id();
}
inline void DocMessage::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void DocMessage::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:crypto.DocMessage.id)
}

// bytes value = 2;
inline void DocMessage::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& DocMessage::value() const {
  // @@protoc_insertion_point(field_get:crypto.DocMessage.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DocMessage::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:crypto.DocMessage.value)
}
inline std::string* DocMessage::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:crypto.DocMessage.value)
  return _s;
}
inline const std::string& DocMessage::_internal_value() const {
  return value_.Get();
}
inline void DocMessage::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DocMessage::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DocMessage::release_value() {
  // @@protoc_insertion_point(field_release:crypto.DocMessage.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DocMessage::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:crypto.DocMessage.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace crypto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crypto_2eproto
